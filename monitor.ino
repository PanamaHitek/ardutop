/********************************************************************
Adapted by Edgar Casanova Cardoz - Diciembre 2014
http://idun.com.mx
email: ecardoz@idun.com.mx
twitter: @ecardoz

Ardutop: Arduino System Monitor for Linux

********************************************************************/


#include <Adafruit_GFX.h>
#include <Adafruit_PCD8544.h>

const unsigned char PROGMEM idun [] = {
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x7c,0x0,0x0,0x1f,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x7e,0x0,0x0,0x1f,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x7e,0x0,0x0,0x1f,0x80,0x1f,0xe0,0x0,0x0,0x0,0x0,
0x7e,0x0,0x0,0x1f,0x80,0x7f,0xfc,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x1f,0x81,0xff,0xff,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x1f,0x83,0xff,0xff,0x80,0x0,0x0,0x0,
0x78,0x0,0x7c,0x1f,0x87,0xff,0xff,0xc0,0x3,0xf0,0x0,
0x7c,0x1,0xff,0x1f,0x88,0x1f,0xf8,0x20,0x1f,0xfc,0x0,
0x7e,0x3,0xff,0x9f,0x98,0x1f,0xf0,0x30,0x7f,0xff,0x0,
0x7e,0x7,0xff,0xff,0x98,0x1f,0xf0,0x30,0xff,0xff,0x80,
0x7e,0xf,0xff,0xff,0xb8,0x1f,0xf0,0x39,0xff,0xff,0xc0,
0x7e,0x1f,0xf1,0xff,0xb8,0x1f,0xf0,0x39,0xfc,0x1f,0xc0,
0x7e,0x1f,0xc0,0x7f,0xb8,0x1f,0xf0,0x39,0xf8,0xf,0xe0,
0x7e,0x1f,0x80,0x7f,0xf8,0x1f,0xf0,0x3f,0xf0,0x7,0xe0,
0x7e,0x3f,0x80,0x3f,0xf8,0x1f,0xf0,0x3f,0xf0,0x7,0xe0,
0x7e,0x3f,0x0,0x3f,0xf8,0x1f,0xf0,0x3f,0xf0,0x7,0xe0,
0x7e,0x3f,0x0,0x3f,0xf8,0x1f,0xf0,0x3f,0xf0,0x7,0xe0,
0x7e,0x3f,0x0,0x3f,0xf8,0x1f,0xf0,0x3f,0xf0,0x7,0xe0,
0x7e,0x3f,0x0,0x1f,0xf8,0x1f,0xf0,0x3f,0xf0,0x7,0xe0,
0x7e,0x3f,0x0,0x3f,0xf8,0x1f,0xf0,0x3f,0xf0,0x7,0xe0,
0x7e,0x3f,0x0,0x3f,0xb8,0x1f,0xf0,0x3b,0xf0,0x7,0xe0,
0x7e,0x3f,0x0,0x3f,0xb8,0x1f,0xf0,0x3b,0xf0,0x7,0xe0,
0x7e,0x3f,0x0,0x3f,0x38,0x1f,0xe0,0x33,0xf0,0x7,0xe0,
0x7e,0x1f,0x80,0x3f,0x18,0x1f,0xf0,0x33,0xf0,0x7,0xe0,
0x7e,0x1f,0xc0,0x7f,0x8,0xf,0xe0,0x63,0xf0,0x7,0xe0,
0x7e,0x1f,0xe1,0xfe,0xc,0x7,0x80,0x63,0xf0,0x7,0xe0,
0x7e,0xf,0xff,0xfe,0x4,0x0,0x0,0xc3,0xf0,0x7,0xe0,
0x7e,0xf,0xff,0xfc,0x2,0x0,0x0,0x83,0xf0,0x7,0xe0,
0x7e,0x7,0xff,0xf8,0x1,0x0,0x1,0x3,0xf0,0x7,0xe0,
0x7e,0x1,0xff,0xe0,0x0,0xc0,0x6,0x3,0xf0,0x3,0xe0,
0x0,0x0,0x3f,0x0,0x0,0x3f,0xf8,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0  
};

// Please use a level shifter (ex. 74HC4050) 
//  if you're using a 5V Arduino
// pin 7 - Serial clock out (SCLK)
// pin 6 - Serial data out (DIN)
// pin 5 - Data/Command select (D/C)
// pin 4 - LCD chip select (CS)
// pin 3 - LCD reset (RST)

Adafruit_PCD8544 display = Adafruit_PCD8544(7, 6, 5, 3, 4);

void setup()   {
  Serial.begin(9600);
  display.begin();
  screensplash();
  display.setContrast(50);
  analogWrite(led,255);  
}


void loop() {
  int sizeStream  = 28;
  int total_ram   = 0;
  char stream[sizeStream];
  display.clearDisplay();
  display.setTextSize(1);
  display.setCursor(0,0);
  
  if(Serial.available()){
    delay(10);  //proporciona cierta "estabilidad" a la lectura de datos
    Serial.readBytes(stream, sizeStream);
    Serial.flush();  //muy importante borrar lo que haya en el puerto
    monitorBase();
    
    printCpuPercent(35, 0, stream[0],  stream[1],  stream[2], 0);
    
    printCpuPercent(35, 8, stream[3],  stream[4],  stream[5], 8);
    
    printCpuPercent(35, 16, stream[6],  stream[7],  stream[8], 16);
    
    printCpuPercent(35, 24, stream[9],  stream[10], stream[11], 24);
    
    printMem(30, 32, stream[12], stream[13], stream[14], stream[15]);
    printMem(60, 32, stream[24], stream[25], stream[26], stream[27]);
    
    draw_mem_bar(
      stream[12], stream[13], stream[14], stream[15], 
      stream[16], stream[17], stream[18], stream[19], 
      stream[20], stream[21], stream[22], stream[23]);
    
    display.display();
    Serial.end();    
    Serial.begin(9600);
    Serial.flush();  //muy importante borrar lo que haya en el puerto
  }
}

void draw_mem_bar(
  char u1, char u2, char u3, char u4, 
  char f1, char f2, char f3, char f4, 
  char b1, char b2, char b3, char b4){
    
    char buf_used_real_ram[] = {u1, u2, u3, u4, '\0'};
    char buf_free_ram[]      = {f1, f2, f3, f4, '\0'};
    char buf_buffer_ram[]    = {b1, b2, b3, b4, '\0'};
    
    int used_real_ram = atoi(buf_used_real_ram);
    int buffer_ram    = atoi(buf_buffer_ram);
    int free_ram      = atoi(buf_free_ram);
    
    int total_ram = used_real_ram + buffer_ram + free_ram;
    int punto = total_ram/82;
    
    display.drawRect(0, 40, 84, 8, BLACK); //marco de la barra
    
    //barra memoria usada:
    used_real_ram = used_real_ram/punto;
    display.fillRect(1, 41,  used_real_ram, 7, BLACK);
    
    //buffer memoria ram:
    buffer_ram = buffer_ram/punto;
    
    draw_dotted_bar(used_real_ram+1, 41, buffer_ram);
  
}

void draw_dotted_bar(int x, int y, int limit){
  for(int i=0; i<6; i++){
    if(i%2==0){
      draw_dotted_line(x, y+i, limit);
    }else{
      draw_dotted_line(x-1, y+i, limit);
    }
  }
}

void draw_dotted_line(int x, int y, int limit){
  for(int i=0; i<=limit; i++){
    if(i%2==0){
      display.drawPixel(x+i, y, BLACK);
    }else{
      display.drawPixel(x+i, y, WHITE);
    }
  }
}


void screensplash(){
  int b = 1;
  display.clearDisplay();
  display.drawBitmap(0, 0, idun, 84, 48, BLACK);
  display.display();
  delay(500);
  display.clearDisplay();
}

void printCpuPercent(int x, int y, char b1, char b2, char b3, int inicio_barra){
  char buffer[] = {b1, b2, b3, '\0'};
  display.setTextSize(1);
  display.setCursor(x, y);
  int b = atoi(buffer);
  if(b <100){
    if(b <10){
      buffer[0] = ' ';
      buffer[1] = ' ';
    }
    else{
      buffer[0] = ' ';
    }
  }
  display.println(buffer);
  b = b/5;
  display.fillRect(61, inicio_barra,  b, 7, BLACK);
  display.drawRect(60, inicio_barra, 22, 7, BLACK); //marco de la barra
}

void printMem(int x, int y, char b1, char b2, char b3, char b4){
  char buffer[] = {b1, b2, b3, b4, '\0'};
  display.setTextSize(1);
  display.setCursor(x, y);
    int b = atoi(buffer);
  if(b < 1000){
    if(b < 100){
      if(b < 10){
        buffer[0] = ' ';
        buffer[1] = ' ';
        buffer[2] = ' ';
      }else{
        buffer[0] = ' ';
        buffer[1] = ' ';
      }
    }
    else{
      buffer[0] = ' ';
    }
  }
  display.println(buffer);
}

void monitorBase(){
  display.clearDisplay();
  display.setTextSize(1);
  display.setCursor(0, 0);
  display.println("CPU 0:   %\nCPU 1:   %\nCPU 2:   %\nCPU 3:   %\nRAM :    /");
  display.display();
}
